extends layout
append styles
	link(rel='stylesheet', href='/stylesheets/daterangepicker.css')
append scripts
	script(type='text/javascript', src='/javascripts/jquery.daterangepicker.js')
	script(src='//webapi.amap.com/ui/1.0/main.js?v=1.0.11')

block append content
	#searchPanel
		//label 选择日期：
		input(type='text', name='from', id='from', size='25')
		&nbsp;
		button(type='button', onClick='doSearch();')查询
		button(type='button', onClick='pause();')暂停
		button(type='button', onClick='resume();')恢复
	script(type='text/javascript').
		var pathSimplifierIns;
		var navg0;
		var yesterday = moment().subtract(1, 'day').format('YYYY-MM-DD');
		var startDate, endDate;
		map.on('complete', function () {
			doSearch();
		});

		function doSearch() {
			var inputDate = $('#from').val();
			if (!inputDate || inputDate == '') {
				endDate = yesterday;
			}
			
			if (pathSimplifierIns) {
				pathSimplifierIns.setData();
				map.clearMap();
			}
			var href = decodeURI(window.location.href);
			var hrefArray = href.split('/');
			var vehicle = hrefArray[hrefArray.length - 1];

			$.ajax({
				url: '/showHistory',
				data: {
					vehicle: vehicle,
					startDate: startDate,
					endDate: endDate,
				},
				type: 'post',
				success: function (results) {
					drawTrack(results.data);
				},
				cache: false,
			});
		}

		function drawTrack(data) {
			var formatData = [];
			for (var i = 0; i < data.length; i++) {
				for(var j = 0; j < data[i].data.length; j++) {
					var point = data[i].data[j];
					var date = data[i].date;
					point['date'] = date;
					formatData.push(point);
				}
			}
			//加载PathSimplifier，loadUI的路径参数为模块名中 'ui/' 之后的部分
			AMapUI.load(['ui/misc/PathSimplifier'], function (PathSimplifier) {

				if (!PathSimplifier.supportCanvas) {
					alert('当前环境不支持 Canvas！');
					return;
				}
				//启动页面
				//创建组件实例
				pathSimplifierIns = new PathSimplifier({
					zIndex: 100,
					map: map, //所属的地图实例
					getPath: function (pathData, pathIndex) {
						//返回轨迹数据中的节点坐标信息，[AMap.LngLat, AMap.LngLat...] 或者 [[lng|number,lat|number],...]
						var path = [];
						for (var i = 0; i < pathData.path.length; i++) {					
							path.push(new AMap.LngLat(pathData.path[i].lng, pathData.path[i].lat));
						}
						return path;
					},
					getHoverTitle: function (pathData, pathIndex, pointIndex) {
						//返回鼠标悬停时显示的信息
						if (pointIndex >= 0) {
							//鼠标悬停在某个轨迹节点上
							return pathData.path[pointIndex].vehicle + '，坐标:' + pathData.path[pointIndex].lng + ',' + pathData.path[pointIndex].lat + '，速度:' + pathData.path[pointIndex].veo + '，时间:' + pathData.path[pointIndex].date + ' ' + pathData.path[pointIndex].gpstime;
						}
						//鼠标悬停在节点之间的连线上
						return pathData.path[0].vehicle;
					},
					renderOptions: {
						//轨迹线的样式
						pathLineStyle: {
							strokeStyle: 'red',
							lineWidth: 6,
							dirArrowStyle: true
						}
					}
				});
				doDraw(formatData);
			});
		}

		function doDraw(data) {
			pathSimplifierIns.setData([{
				name: 'path0',
				path: data
			}]);
			//创建一个巡航器
			AMapUI.load(['ui/misc/PathSimplifier'], function (PathSimplifier) {
				navg0 = pathSimplifierIns.createPathNavigator(0, {	//关联第1条轨迹
					speed: 20000,
					pathNavigatorStyle: {
						width: 16,
						height: 32,
						content: PathSimplifier.Render.Canvas.getImageContent('/images/car.png', onload, onerror),
						strokeStyle: null,
						fillStyle: null
					}
				});

				navg0.start();
				var marker = new AMap.Marker({
					offset: new AMap.Pixel(20, -20),
					map: map
				});;
				navg0.on('move', function() {
					var cursor = navg0.getCursor();
					var idx = cursor.idx;
					var data = pathSimplifierIns.getPathData(0).path[idx];
					marker.setContent('<div class=\'marker\'>时间：' + data.date + ' ' + data.gpstime + '<br />速度：' + data.veo + '<br />位置：' + data.lng + ',' + data.lat + '</div>');
					marker.setPosition(navg0.getPosition());
				})
			});
		}

		function pause() {
			navg0.pause();
		}

		function resume() {
			navg0.resume();
		}

		$(function () {
			$("#from").dateRangePicker({
				autoClose: true,
				language: 'cn',
				separator: ' 至 ',
				startDate: moment(new Date('!{start}')).format('YYYY-MM-DD'),
				endDate: yesterday
			}).bind('datepicker-change',function(event,obj) {
				startDate = moment(obj.date1).format('YYYY-MM-DD');
				endDate = moment(obj.date2).format('YYYY-MM-DD');
			});
		});